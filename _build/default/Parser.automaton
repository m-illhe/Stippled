State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On PRINT shift to state 11
-- On LT shift to state 115
-- On IF shift to state 131
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On EOF shift to state 175
-- On DRAW shift to state 145
-- On COPY shift to state 150
-- On BEGIN shift to state 157
-- On type_expr shift to state 161
-- On statement shift to state 176
-- On main shift to state 178
## Reductions:

State 1:
## Known stack suffix:
## TYPE_POS
## LR(1) items:
type_expr -> TYPE_POS . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_POS

State 2:
## Known stack suffix:
## TYPE_POINT
## LR(1) items:
type_expr -> TYPE_POINT . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_POINT

State 3:
## Known stack suffix:
## TYPE_LIST
## LR(1) items:
type_expr -> TYPE_LIST . L_PAR type_expr R_PAR [ R_PAR L_PAR ]
## Transitions:
-- On L_PAR shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## TYPE_LIST L_PAR
## LR(1) items:
type_expr -> TYPE_LIST L_PAR . type_expr R_PAR [ R_PAR L_PAR ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On type_expr shift to state 9
## Reductions:

State 5:
## Known stack suffix:
## TYPE_INT
## LR(1) items:
type_expr -> TYPE_INT . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_INT

State 6:
## Known stack suffix:
## TYPE_FLOAT
## LR(1) items:
type_expr -> TYPE_FLOAT . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_FLOAT

State 7:
## Known stack suffix:
## TYPE_COLOR
## LR(1) items:
type_expr -> TYPE_COLOR . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_COLOR

State 8:
## Known stack suffix:
## TYPE_BOOL
## LR(1) items:
type_expr -> TYPE_BOOL . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_BOOL

State 9:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr
## LR(1) items:
type_expr -> TYPE_LIST L_PAR type_expr . R_PAR [ R_PAR L_PAR ]
## Transitions:
-- On R_PAR shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr R_PAR
## LR(1) items:
type_expr -> TYPE_LIST L_PAR type_expr R_PAR . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production type_expr -> TYPE_LIST L_PAR type_expr R_PAR

State 11:
## Known stack suffix:
## PRINT
## LR(1) items:
statement -> PRINT . L_PAR expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> PRINT . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On L_PAR shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## PRINT L_PAR
## LR(1) items:
statement -> PRINT L_PAR . expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> PRINT L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 112
## Reductions:

State 13:
## Known stack suffix:
## TYPE_POS
## LR(1) items:
expression -> TYPE_POS . L_PAR expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## TYPE_POS L_PAR
## LR(1) items:
expression -> TYPE_POS L_PAR . expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 108
## Reductions:

State 15:
## Known stack suffix:
## TYPE_POINT
## LR(1) items:
expression -> TYPE_POINT . L_PAR expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## TYPE_POINT L_PAR
## LR(1) items:
expression -> TYPE_POINT L_PAR . expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 104
## Reductions:

State 17:
## Known stack suffix:
## TYPE_COLOR
## LR(1) items:
expression -> TYPE_COLOR . L_PAR expression COMMA expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## TYPE_COLOR L_PAR
## LR(1) items:
expression -> TYPE_COLOR L_PAR . expression COMMA expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 98
## Reductions:

State 19:
## Known stack suffix:
## TAIL
## LR(1) items:
expression -> TAIL . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## TAIL L_PAR
## LR(1) items:
expression -> TAIL L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 96
## Reductions:

State 21:
## Known stack suffix:
## SUB
## LR(1) items:
expression -> SUB . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## SUB L_PAR
## LR(1) items:
expression -> SUB L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 94
## Reductions:

State 23:
## Known stack suffix:
## SIN
## LR(1) items:
expression -> SIN . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## SIN L_PAR
## LR(1) items:
expression -> SIN L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 92
## Reductions:

State 25:
## Known stack suffix:
## NOT
## LR(1) items:
expression -> NOT . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 91
## Reductions:

State 26:
## Known stack suffix:
## L_SQ_BRK
## LR(1) items:
expression -> L_SQ_BRK . expression_list R_SQ_BRK [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression_list shift to state 86
-- On expression shift to state 88
## Reductions:
-- On R_SQ_BRK
--   reduce production expression_list ->

State 27:
## Known stack suffix:
## L_PAR
## LR(1) items:
expression -> L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 84
## Reductions:

State 28:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> INT

State 29:
## Known stack suffix:
## ID
## LR(1) items:
expression -> ID . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> ID

State 30:
## Known stack suffix:
## HEAD
## LR(1) items:
expression -> HEAD . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## HEAD L_PAR
## LR(1) items:
expression -> HEAD L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 82
## Reductions:

State 32:
## Known stack suffix:
## FLOOR
## LR(1) items:
expression -> FLOOR . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## FLOOR L_PAR
## LR(1) items:
expression -> FLOOR L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 80
## Reductions:

State 34:
## Known stack suffix:
## FLOAT_OF_INT
## LR(1) items:
expression -> FLOAT_OF_INT . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## FLOAT_OF_INT L_PAR
## LR(1) items:
expression -> FLOAT_OF_INT L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 78
## Reductions:

State 36:
## Known stack suffix:
## FLOAT
## LR(1) items:
expression -> FLOAT . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> FLOAT

State 37:
## Known stack suffix:
## COS
## LR(1) items:
expression -> COS . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## COS L_PAR
## LR(1) items:
expression -> COS L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> BOOL

State 40:
## Known stack suffix:
## COS L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> COS L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 57
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 41:
## Known stack suffix:
## expression SUB
## LR(1) items:
expression -> expression SUB . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## expression SUB expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression SUB expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression SUB expression

State 43:
## Known stack suffix:
## expression MUL
## LR(1) items:
expression -> expression MUL . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## expression MUL expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression MUL expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 45
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression MUL expression

State 45:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DOT . TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DOT . X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DOT . Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DOT . BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DOT . RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DOT . GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On Y_ACCESSOR shift to state 46
-- On X_ACCESSOR shift to state 47
-- On TYPE_POS shift to state 48
-- On TYPE_COLOR shift to state 49
-- On RED_ACCESSOR shift to state 50
-- On GREEN_ACCESSOR shift to state 51
-- On BLUE_ACCESSOR shift to state 52
## Reductions:

State 46:
## Known stack suffix:
## expression DOT Y_ACCESSOR
## LR(1) items:
expression -> expression DOT Y_ACCESSOR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT Y_ACCESSOR

State 47:
## Known stack suffix:
## expression DOT X_ACCESSOR
## LR(1) items:
expression -> expression DOT X_ACCESSOR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT X_ACCESSOR

State 48:
## Known stack suffix:
## expression DOT TYPE_POS
## LR(1) items:
expression -> expression DOT TYPE_POS . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT TYPE_POS

State 49:
## Known stack suffix:
## expression DOT TYPE_COLOR
## LR(1) items:
expression -> expression DOT TYPE_COLOR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT TYPE_COLOR

State 50:
## Known stack suffix:
## expression DOT RED_ACCESSOR
## LR(1) items:
expression -> expression DOT RED_ACCESSOR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT RED_ACCESSOR

State 51:
## Known stack suffix:
## expression DOT GREEN_ACCESSOR
## LR(1) items:
expression -> expression DOT GREEN_ACCESSOR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT GREEN_ACCESSOR

State 52:
## Known stack suffix:
## expression DOT BLUE_ACCESSOR
## LR(1) items:
expression -> expression DOT BLUE_ACCESSOR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DOT BLUE_ACCESSOR

State 53:
## Known stack suffix:
## expression MOD
## LR(1) items:
expression -> expression MOD . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expression MOD expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression MOD expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 45
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression MOD expression

State 55:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression DIV expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 45
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression DIV expression

State 57:
## Known stack suffix:
## COS L_PAR expression R_PAR
## LR(1) items:
expression -> COS L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> COS L_PAR expression R_PAR

State 58:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression OR expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR IF FOREACH FOR DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression OR expression

State 60:
## Known stack suffix:
## expression NE
## LR(1) items:
expression -> expression NE . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## expression NE expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression NE expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression NE expression

State 62:
## Known stack suffix:
## expression ADD
## LR(1) items:
expression -> expression ADD . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## expression ADD expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression ADD expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> expression ADD expression

State 64:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression LT expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression LT expression

State 66:
## Known stack suffix:
## expression LE
## LR(1) items:
expression -> expression LE . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## expression LE expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression LE expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression LE expression

State 68:
## Known stack suffix:
## expression GT
## LR(1) items:
expression -> expression GT . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## expression GT expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression GT expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression GT expression

State 70:
## Known stack suffix:
## expression GE
## LR(1) items:
expression -> expression GE . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## expression GE expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression GE expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression GE expression

State 72:
## Known stack suffix:
## expression EQ
## LR(1) items:
expression -> expression EQ . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression EQ expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR NE LT LE IF GT GE FOREACH FOR EQ DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression EQ expression

State 74:
## Known stack suffix:
## expression CONS
## LR(1) items:
expression -> expression CONS . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## expression CONS expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression CONS expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR IF FOREACH FOR DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression CONS expression

State 76:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression AND expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On ADD shift to state 62
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO STEP R_SQ_BRK R_PAR PRINT OR IF FOREACH FOR DRAW COPY CONS COMMA BEGIN AND
--   reduce production expression -> expression AND expression

State 78:
## Known stack suffix:
## FLOAT_OF_INT L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> FLOAT_OF_INT L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 79
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 79:
## Known stack suffix:
## FLOAT_OF_INT L_PAR expression R_PAR
## LR(1) items:
expression -> FLOAT_OF_INT L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> FLOAT_OF_INT L_PAR expression R_PAR

State 80:
## Known stack suffix:
## FLOOR L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> FLOOR L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 81
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 81:
## Known stack suffix:
## FLOOR L_PAR expression R_PAR
## LR(1) items:
expression -> FLOOR L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> FLOOR L_PAR expression R_PAR

State 82:
## Known stack suffix:
## HEAD L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> HEAD L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 83
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 83:
## Known stack suffix:
## HEAD L_PAR expression R_PAR
## LR(1) items:
expression -> HEAD L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> HEAD L_PAR expression R_PAR

State 84:
## Known stack suffix:
## L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 85
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 85:
## Known stack suffix:
## L_PAR expression R_PAR
## LR(1) items:
expression -> L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> L_PAR expression R_PAR

State 86:
## Known stack suffix:
## L_SQ_BRK expression_list
## LR(1) items:
expression -> L_SQ_BRK expression_list . R_SQ_BRK [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On R_SQ_BRK shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## L_SQ_BRK expression_list R_SQ_BRK
## LR(1) items:
expression -> L_SQ_BRK expression_list R_SQ_BRK . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> L_SQ_BRK expression_list R_SQ_BRK

State 88:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . SUB expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MUL expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DIV expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MOD expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . AND expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . OR expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . EQ expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . NE expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LT expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GT expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LE expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GE expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . CONS expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression_list -> expression . [ R_SQ_BRK ]
expression_list -> expression . COMMA expression_list [ R_SQ_BRK ]
## Transitions:
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On COMMA shift to state 89
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:
-- On R_SQ_BRK
--   reduce production expression_list -> expression

State 89:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expression_list -> expression COMMA . expression_list [ R_SQ_BRK ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression_list shift to state 90
-- On expression shift to state 88
## Reductions:
-- On R_SQ_BRK
--   reduce production expression_list ->

State 90:
## Known stack suffix:
## expression COMMA expression_list
## LR(1) items:
expression_list -> expression COMMA expression_list . [ R_SQ_BRK ]
## Transitions:
## Reductions:
-- On R_SQ_BRK
--   reduce production expression_list -> expression COMMA expression_list

State 91:
## Known stack suffix:
## NOT expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> NOT expression . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> NOT expression

State 92:
## Known stack suffix:
## SIN L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> SIN L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 93
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 93:
## Known stack suffix:
## SIN L_PAR expression R_PAR
## LR(1) items:
expression -> SIN L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> SIN L_PAR expression R_PAR

State 94:
## Known stack suffix:
## SUB L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> SUB L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 95
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 95:
## Known stack suffix:
## SUB L_PAR expression R_PAR
## LR(1) items:
expression -> SUB L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> SUB L_PAR expression R_PAR

State 96:
## Known stack suffix:
## TAIL L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> TAIL L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 97
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 97:
## Known stack suffix:
## TAIL L_PAR expression R_PAR
## LR(1) items:
expression -> TAIL L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> TAIL L_PAR expression R_PAR

State 98:
## Known stack suffix:
## TYPE_COLOR L_PAR expression
## LR(1) items:
expression -> TYPE_COLOR L_PAR expression . COMMA expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . CONS expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On COMMA shift to state 99
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 99:
## Known stack suffix:
## TYPE_COLOR L_PAR expression COMMA
## LR(1) items:
expression -> TYPE_COLOR L_PAR expression COMMA . expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## TYPE_COLOR L_PAR expression COMMA expression
## LR(1) items:
expression -> TYPE_COLOR L_PAR expression COMMA expression . COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . CONS expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On COMMA shift to state 101
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 101:
## Known stack suffix:
## TYPE_COLOR L_PAR expression COMMA expression COMMA
## LR(1) items:
expression -> TYPE_COLOR L_PAR expression COMMA expression COMMA . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## TYPE_COLOR L_PAR expression COMMA expression COMMA expression
## LR(1) items:
expression -> TYPE_COLOR L_PAR expression COMMA expression COMMA expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 103
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 103:
## Known stack suffix:
## TYPE_COLOR L_PAR expression COMMA expression COMMA expression R_PAR
## LR(1) items:
expression -> TYPE_COLOR L_PAR expression COMMA expression COMMA expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> TYPE_COLOR L_PAR expression COMMA expression COMMA expression R_PAR

State 104:
## Known stack suffix:
## TYPE_POINT L_PAR expression
## LR(1) items:
expression -> TYPE_POINT L_PAR expression . COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . CONS expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On COMMA shift to state 105
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 105:
## Known stack suffix:
## TYPE_POINT L_PAR expression COMMA
## LR(1) items:
expression -> TYPE_POINT L_PAR expression COMMA . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## TYPE_POINT L_PAR expression COMMA expression
## LR(1) items:
expression -> TYPE_POINT L_PAR expression COMMA expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 107
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 107:
## Known stack suffix:
## TYPE_POINT L_PAR expression COMMA expression R_PAR
## LR(1) items:
expression -> TYPE_POINT L_PAR expression COMMA expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> TYPE_POINT L_PAR expression COMMA expression R_PAR

State 108:
## Known stack suffix:
## TYPE_POS L_PAR expression
## LR(1) items:
expression -> TYPE_POS L_PAR expression . COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . CONS expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On COMMA shift to state 109
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 109:
## Known stack suffix:
## TYPE_POS L_PAR expression COMMA
## LR(1) items:
expression -> TYPE_POS L_PAR expression COMMA . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## TYPE_POS L_PAR expression COMMA expression
## LR(1) items:
expression -> TYPE_POS L_PAR expression COMMA expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 111
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 111:
## Known stack suffix:
## TYPE_POS L_PAR expression COMMA expression R_PAR
## LR(1) items:
expression -> TYPE_POS L_PAR expression COMMA expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL TO SUB STEP R_SQ_BRK R_PAR PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS COMMA BEGIN AND ADD
--   reduce production expression -> TYPE_POS L_PAR expression COMMA expression R_PAR

State 112:
## Known stack suffix:
## PRINT L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
statement -> PRINT L_PAR expression . R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> PRINT L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 113
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 113:
## Known stack suffix:
## PRINT L_PAR expression R_PAR
## LR(1) items:
statement -> PRINT L_PAR expression R_PAR . SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> PRINT L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 114
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> PRINT L_PAR expression R_PAR

State 114:
## Known stack suffix:
## PRINT L_PAR expression R_PAR SEMICOLON
## LR(1) items:
statement -> PRINT L_PAR expression R_PAR SEMICOLON . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> PRINT L_PAR expression R_PAR SEMICOLON

State 115:
## Known stack suffix:
## LT
## LR(1) items:
main -> LT . argument_list GT statement EOF [ # ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 116
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On type_expr shift to state 123
-- On argument_list shift to state 127
-- On argument shift to state 174
## Reductions:
-- On SEMICOLON GT
--   reduce production argument_list ->

State 116:
## Known stack suffix:
## TYPE_LIST
## LR(1) items:
argument -> TYPE_LIST . L_PAR type_expr R_PAR L_PAR ID R_PAR [ SEMICOLON GT ]
type_expr -> TYPE_LIST . L_PAR type_expr R_PAR [ L_PAR ]
## Transitions:
-- On L_PAR shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## TYPE_LIST L_PAR
## LR(1) items:
argument -> TYPE_LIST L_PAR . type_expr R_PAR L_PAR ID R_PAR [ SEMICOLON GT ]
type_expr -> TYPE_LIST L_PAR . type_expr R_PAR [ L_PAR ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On type_expr shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr
## LR(1) items:
argument -> TYPE_LIST L_PAR type_expr . R_PAR L_PAR ID R_PAR [ SEMICOLON GT ]
type_expr -> TYPE_LIST L_PAR type_expr . R_PAR [ L_PAR ]
## Transitions:
-- On R_PAR shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr R_PAR
## LR(1) items:
argument -> TYPE_LIST L_PAR type_expr R_PAR . L_PAR ID R_PAR [ SEMICOLON GT ]
type_expr -> TYPE_LIST L_PAR type_expr R_PAR . [ L_PAR ]
## Transitions:
-- On L_PAR shift to state 120
## Reductions:
-- On L_PAR
--   reduce production type_expr -> TYPE_LIST L_PAR type_expr R_PAR
** Conflict on L_PAR

State 120:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr R_PAR L_PAR
## LR(1) items:
argument -> TYPE_LIST L_PAR type_expr R_PAR L_PAR . ID R_PAR [ SEMICOLON GT ]
## Transitions:
-- On ID shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr R_PAR L_PAR ID
## LR(1) items:
argument -> TYPE_LIST L_PAR type_expr R_PAR L_PAR ID . R_PAR [ SEMICOLON GT ]
## Transitions:
-- On R_PAR shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## TYPE_LIST L_PAR type_expr R_PAR L_PAR ID R_PAR
## LR(1) items:
argument -> TYPE_LIST L_PAR type_expr R_PAR L_PAR ID R_PAR . [ SEMICOLON GT ]
## Transitions:
## Reductions:
-- On SEMICOLON GT
--   reduce production argument -> TYPE_LIST L_PAR type_expr R_PAR L_PAR ID R_PAR

State 123:
## Known stack suffix:
## type_expr
## LR(1) items:
argument -> type_expr . L_PAR ID R_PAR [ SEMICOLON GT ]
## Transitions:
-- On L_PAR shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## type_expr L_PAR
## LR(1) items:
argument -> type_expr L_PAR . ID R_PAR [ SEMICOLON GT ]
## Transitions:
-- On ID shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## type_expr L_PAR ID
## LR(1) items:
argument -> type_expr L_PAR ID . R_PAR [ SEMICOLON GT ]
## Transitions:
-- On R_PAR shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## type_expr L_PAR ID R_PAR
## LR(1) items:
argument -> type_expr L_PAR ID R_PAR . [ SEMICOLON GT ]
## Transitions:
## Reductions:
-- On SEMICOLON GT
--   reduce production argument -> type_expr L_PAR ID R_PAR

State 127:
## Known stack suffix:
## LT argument_list
## LR(1) items:
argument_list -> argument_list . SEMICOLON argument [ SEMICOLON GT ]
main -> LT argument_list . GT statement EOF [ # ]
## Transitions:
-- On SEMICOLON shift to state 128
-- On GT shift to state 130
## Reductions:

State 128:
## Known stack suffix:
## argument_list SEMICOLON
## LR(1) items:
argument_list -> argument_list SEMICOLON . argument [ SEMICOLON GT ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 116
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On type_expr shift to state 123
-- On argument shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## argument_list SEMICOLON argument
## LR(1) items:
argument_list -> argument_list SEMICOLON argument . [ SEMICOLON GT ]
## Transitions:
## Reductions:
-- On SEMICOLON GT
--   reduce production argument_list -> argument_list SEMICOLON argument

State 130:
## Known stack suffix:
## LT argument_list GT
## LR(1) items:
main -> LT argument_list GT . statement EOF [ # ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On PRINT shift to state 11
-- On IF shift to state 131
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On DRAW shift to state 145
-- On COPY shift to state 150
-- On BEGIN shift to state 157
-- On type_expr shift to state 161
-- On statement shift to state 172
## Reductions:

State 131:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . expression statement ELSE statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> IF . expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
statement -> IF expression . statement ELSE statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> IF expression . statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On SUB shift to state 41
-- On PRINT shift to state 11
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On IF shift to state 131
-- On GT shift to state 68
-- On GE shift to state 70
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On EQ shift to state 72
-- On DRAW shift to state 145
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On COPY shift to state 150
-- On CONS shift to state 74
-- On BEGIN shift to state 157
-- On AND shift to state 76
-- On ADD shift to state 62
-- On type_expr shift to state 161
-- On statement shift to state 169
## Reductions:

State 133:
## Known stack suffix:
## FOREACH
## LR(1) items:
statement -> FOREACH . ID IN expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On ID shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## FOREACH ID
## LR(1) items:
statement -> FOREACH ID . IN expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On IN shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## FOREACH ID IN
## LR(1) items:
statement -> FOREACH ID IN . expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## FOREACH ID IN expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
statement -> FOREACH ID IN expression . statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On SUB shift to state 41
-- On PRINT shift to state 11
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On IF shift to state 131
-- On GT shift to state 68
-- On GE shift to state 70
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On EQ shift to state 72
-- On DRAW shift to state 145
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On COPY shift to state 150
-- On CONS shift to state 74
-- On BEGIN shift to state 157
-- On AND shift to state 76
-- On ADD shift to state 62
-- On type_expr shift to state 161
-- On statement shift to state 168
## Reductions:

State 137:
## Known stack suffix:
## FOR
## LR(1) items:
statement -> FOR . ID FROM expression TO expression STEP expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On ID shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## FOR ID
## LR(1) items:
statement -> FOR ID . FROM expression TO expression STEP expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On FROM shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## FOR ID FROM
## LR(1) items:
statement -> FOR ID FROM . expression TO expression STEP expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## FOR ID FROM expression
## LR(1) items:
expression -> expression . ADD expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
statement -> FOR ID FROM expression . TO expression STEP expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TO shift to state 141
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 141:
## Known stack suffix:
## FOR ID FROM expression TO
## LR(1) items:
statement -> FOR ID FROM expression TO . expression STEP expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## FOR ID FROM expression TO expression
## LR(1) items:
expression -> expression . ADD expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
statement -> FOR ID FROM expression TO expression . STEP expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SUB shift to state 41
-- On STEP shift to state 143
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 143:
## Known stack suffix:
## FOR ID FROM expression TO expression STEP
## LR(1) items:
statement -> FOR ID FROM expression TO expression STEP . expression statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## FOR ID FROM expression TO expression STEP expression
## LR(1) items:
expression -> expression . ADD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . SUB expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . MUL expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DIV expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . MOD expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . AND expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . OR expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . EQ expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . NE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . LT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . GT expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . LE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . GE expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT TYPE_COLOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT TYPE_POS [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT X_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
expression -> expression . CONS expression [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL SUB PRINT OR NE MUL MOD LT LE IF GT GE FOREACH FOR EQ DRAW DOT DIV COPY CONS BEGIN AND ADD ]
statement -> FOR ID FROM expression TO expression STEP expression . statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On SUB shift to state 41
-- On PRINT shift to state 11
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On IF shift to state 131
-- On GT shift to state 68
-- On GE shift to state 70
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On EQ shift to state 72
-- On DRAW shift to state 145
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On COPY shift to state 150
-- On CONS shift to state 74
-- On BEGIN shift to state 157
-- On AND shift to state 76
-- On ADD shift to state 62
-- On type_expr shift to state 161
-- On statement shift to state 167
## Reductions:

State 145:
## Known stack suffix:
## DRAW
## LR(1) items:
statement -> DRAW . L_PAR expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> DRAW . L_PAR expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On L_PAR shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## DRAW L_PAR
## LR(1) items:
statement -> DRAW L_PAR . expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> DRAW L_PAR . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## DRAW L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
statement -> DRAW L_PAR expression . R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> DRAW L_PAR expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 148
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 148:
## Known stack suffix:
## DRAW L_PAR expression R_PAR
## LR(1) items:
statement -> DRAW L_PAR expression R_PAR . SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> DRAW L_PAR expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 149
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> DRAW L_PAR expression R_PAR

State 149:
## Known stack suffix:
## DRAW L_PAR expression R_PAR SEMICOLON
## LR(1) items:
statement -> DRAW L_PAR expression R_PAR SEMICOLON . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> DRAW L_PAR expression R_PAR SEMICOLON

State 150:
## Known stack suffix:
## COPY
## LR(1) items:
statement -> COPY . L_PAR expression COMMA expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> COPY . L_PAR expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On L_PAR shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## COPY L_PAR
## LR(1) items:
statement -> COPY L_PAR . expression COMMA expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> COPY L_PAR . expression COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## COPY L_PAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . SUB expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MUL expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DIV expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . MOD expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . AND expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . OR expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . EQ expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . NE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GT expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . LE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . GE expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
expression -> expression . CONS expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS COMMA AND ADD ]
statement -> COPY L_PAR expression . COMMA expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> COPY L_PAR expression . COMMA expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SUB shift to state 41
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On COMMA shift to state 153
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 153:
## Known stack suffix:
## COPY L_PAR expression COMMA
## LR(1) items:
statement -> COPY L_PAR expression COMMA . expression R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> COPY L_PAR expression COMMA . expression R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 13
-- On TYPE_POINT shift to state 15
-- On TYPE_COLOR shift to state 17
-- On TAIL shift to state 19
-- On SUB shift to state 21
-- On SIN shift to state 23
-- On NOT shift to state 25
-- On L_SQ_BRK shift to state 26
-- On L_PAR shift to state 27
-- On INT shift to state 28
-- On ID shift to state 29
-- On HEAD shift to state 30
-- On FLOOR shift to state 32
-- On FLOAT_OF_INT shift to state 34
-- On FLOAT shift to state 36
-- On COS shift to state 37
-- On BOOL shift to state 39
-- On expression shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## COPY L_PAR expression COMMA expression
## LR(1) items:
expression -> expression . ADD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . SUB expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MUL expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DIV expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . MOD expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . AND expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . OR expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . EQ expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . NE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GT expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . LE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . GE expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_COLOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT TYPE_POS [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
expression -> expression . CONS expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV CONS AND ADD ]
statement -> COPY L_PAR expression COMMA expression . R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> COPY L_PAR expression COMMA expression . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SUB shift to state 41
-- On R_PAR shift to state 155
-- On OR shift to state 58
-- On NE shift to state 60
-- On MUL shift to state 43
-- On MOD shift to state 53
-- On LT shift to state 64
-- On LE shift to state 66
-- On GT shift to state 68
-- On GE shift to state 70
-- On EQ shift to state 72
-- On DOT shift to state 45
-- On DIV shift to state 55
-- On CONS shift to state 74
-- On AND shift to state 76
-- On ADD shift to state 62
## Reductions:

State 155:
## Known stack suffix:
## COPY L_PAR expression COMMA expression R_PAR
## LR(1) items:
statement -> COPY L_PAR expression COMMA expression R_PAR . SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> COPY L_PAR expression COMMA expression R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 156
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> COPY L_PAR expression COMMA expression R_PAR

State 156:
## Known stack suffix:
## COPY L_PAR expression COMMA expression R_PAR SEMICOLON
## LR(1) items:
statement -> COPY L_PAR expression COMMA expression R_PAR SEMICOLON . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> COPY L_PAR expression COMMA expression R_PAR SEMICOLON

State 157:
## Known stack suffix:
## BEGIN
## LR(1) items:
statement -> BEGIN . statement_list END SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> BEGIN . statement_list END [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On statement_list shift to state 158
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR END DRAW COPY BEGIN
--   reduce production statement_list ->

State 158:
## Known stack suffix:
## BEGIN statement_list
## LR(1) items:
statement -> BEGIN statement_list . END SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> BEGIN statement_list . END [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement_list -> statement_list . statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR END DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On PRINT shift to state 11
-- On IF shift to state 131
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On END shift to state 159
-- On DRAW shift to state 145
-- On COPY shift to state 150
-- On BEGIN shift to state 157
-- On type_expr shift to state 161
-- On statement shift to state 166
## Reductions:

State 159:
## Known stack suffix:
## BEGIN statement_list END
## LR(1) items:
statement -> BEGIN statement_list END . SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> BEGIN statement_list END . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 160
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> BEGIN statement_list END

State 160:
## Known stack suffix:
## BEGIN statement_list END SEMICOLON
## LR(1) items:
statement -> BEGIN statement_list END SEMICOLON . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> BEGIN statement_list END SEMICOLON

State 161:
## Known stack suffix:
## type_expr
## LR(1) items:
statement -> type_expr . L_PAR ID R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> type_expr . L_PAR ID R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On L_PAR shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## type_expr L_PAR
## LR(1) items:
statement -> type_expr L_PAR . ID R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> type_expr L_PAR . ID R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On ID shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## type_expr L_PAR ID
## LR(1) items:
statement -> type_expr L_PAR ID . R_PAR SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> type_expr L_PAR ID . R_PAR [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On R_PAR shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## type_expr L_PAR ID R_PAR
## LR(1) items:
statement -> type_expr L_PAR ID R_PAR . SEMICOLON [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> type_expr L_PAR ID R_PAR . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 165
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> type_expr L_PAR ID R_PAR

State 165:
## Known stack suffix:
## type_expr L_PAR ID R_PAR SEMICOLON
## LR(1) items:
statement -> type_expr L_PAR ID R_PAR SEMICOLON . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> type_expr L_PAR ID R_PAR SEMICOLON

State 166:
## Known stack suffix:
## statement_list statement
## LR(1) items:
statement_list -> statement_list statement . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR END DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR END DRAW COPY BEGIN
--   reduce production statement_list -> statement_list statement

State 167:
## Known stack suffix:
## FOR ID FROM expression TO expression STEP expression statement
## LR(1) items:
statement -> FOR ID FROM expression TO expression STEP expression statement . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> FOR ID FROM expression TO expression STEP expression statement

State 168:
## Known stack suffix:
## FOREACH ID IN expression statement
## LR(1) items:
statement -> FOREACH ID IN expression statement . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> FOREACH ID IN expression statement

State 169:
## Known stack suffix:
## IF expression statement
## LR(1) items:
statement -> IF expression statement . ELSE statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
statement -> IF expression statement . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On ELSE shift to state 170
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END DRAW COPY BEGIN
--   reduce production statement -> IF expression statement

State 170:
## Known stack suffix:
## IF expression statement ELSE
## LR(1) items:
statement -> IF expression statement ELSE . statement [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
-- On TYPE_POS shift to state 1
-- On TYPE_POINT shift to state 2
-- On TYPE_LIST shift to state 3
-- On TYPE_INT shift to state 5
-- On TYPE_FLOAT shift to state 6
-- On TYPE_COLOR shift to state 7
-- On TYPE_BOOL shift to state 8
-- On PRINT shift to state 11
-- On IF shift to state 131
-- On FOREACH shift to state 133
-- On FOR shift to state 137
-- On DRAW shift to state 145
-- On COPY shift to state 150
-- On BEGIN shift to state 157
-- On type_expr shift to state 161
-- On statement shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## IF expression statement ELSE statement
## LR(1) items:
statement -> IF expression statement ELSE statement . [ TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN ]
## Transitions:
## Reductions:
-- On TYPE_POS TYPE_POINT TYPE_LIST TYPE_INT TYPE_FLOAT TYPE_COLOR TYPE_BOOL PRINT IF FOREACH FOR EOF END ELSE DRAW COPY BEGIN
--   reduce production statement -> IF expression statement ELSE statement

State 172:
## Known stack suffix:
## LT argument_list GT statement
## LR(1) items:
main -> LT argument_list GT statement . EOF [ # ]
## Transitions:
-- On EOF shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## LT argument_list GT statement EOF
## LR(1) items:
main -> LT argument_list GT statement EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> LT argument_list GT statement EOF

State 174:
## Known stack suffix:
## argument
## LR(1) items:
argument_list -> argument . [ SEMICOLON GT ]
## Transitions:
## Reductions:
-- On SEMICOLON GT
--   reduce production argument_list -> argument

State 175:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 176:
## Known stack suffix:
## statement
## LR(1) items:
main -> statement . EOF [ # ]
## Transitions:
-- On EOF shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## statement EOF
## LR(1) items:
main -> statement EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> statement EOF

State 178:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

